Core_Animation核心动画
  跨平台 ios, Mac Os
  Core Animation的动画执行过程都是在后台操作，不会阻塞主线程
  Core Animation是直接作用在CALayer上的，并非UIView
  
使用：
 1、现添加QuarzCore.framework框架——引入头文件<QuartzCore/QuarzCore.h>
 2、初始化CAAnimation对象，并设置一些动画相关属性(必须有layer)
 3、通过调用CALayer的addAnimation:  forKey:方法添加到CALayer中，即可开始动画
 4、调用removeAnimationForKey停止动画
 
 //创建动画对象
 CABasicAnimation *anim = [CABasicAnimation animation];
 //设置动画属性
 anim.KeyPath = @"position";
 anim.toValue = [NSValue valueWithCGPoint:CGPointMake(200,200)];
 //取消反弹*******************
 anim.removedOnCompletion = NO;//动画执行后，不移除动画
 anim.fillMode = KCAFillModeForwards;//保持最新位置
 anim.duration = 2;//动画时长
 anim.repeatCount = MAXFLOAT;//重复次数
 //添加动画
 [_layer addAnimation:anim forKey:nil];
 
 路径动画
 CAKeyframeAnimation *anim = [CAKeyframeAnimation animation];
 anim.keyPath = @"position";
 NSValue *v1 = [NSValue valueWithCGPoint:CGPointZero];
 NSValue *v2 = [NSValue valueWithCGPoint:CGPointMake(160,160)];
 NSValue *v3 = [NSValue valueWithCGPoint:CGPointMake(270,0)];
 anim.values = @[v1,v2,v3];
 [_layer addAnimation:anim forKey:nil];
 
 CAKeyframeAnimation
 anim.KeyPath = @"position";
 UIBezierPath *path = [UIBezierPath bezierPathWithOvalInRect:CGRectMake(0,0,200,200)];
 anim.path = path.CGPath;


图标抖动
//长按
UILongPressGestureRecognizer *longPres = [UILongPressGestureRecognizer alloc] initWithTarget:self action:@selector(longPress:)];
[_imageView addGestureRecognizer:longPres];//_imageView需要开启交互功能
-(void)longPress:(UILongPressGestureRecognizer *)longPress{
   if(longPress.state == UIGestureRecognizerStateBegan){//第一次按开始
     CAKeyframeAnimation *anim = [CAKeyframeAnimation animation];
     anim.keyPath = @"transform.rotation";
     anim.values = @[@(..),@(..),@(..)];//@[左转5度，右转5度，再左转5度];
     anim.repeatCount = MAXFLOAT;
     [_imageView.layer addAnimation:anim forKey:nil];
   }
}
//anim.from.value  从...开始


转场动画
CATransition *anim = [CATransition animation];
anim.type = @"cube";//3d旋转
//@"push",@"rippleEffect",@"pageCurl"
anim.startProgress = 0.8;//从0.8处开始
anim.subtype = KCATransitionFromLeft;

动画组
CAAnimationGroup *group = [CAAnimationGroup animation];
group.animations = @[rotation,position];
[layer addAnimation:group forKey:nil];

UIView封装的动画
anim.delegate = self;
-(void)animationDidStop:(CAAnimation *)anim finish:(BOOL)flag{
}

核心动画都是假象，不能改变layer真实属性的值，展示的位置和实际的位置不同，实际位置永远在最开始的位置

UIView转场动画（一般不用）
[UIView transitionWithView:self.view duration:0.5 option:UIViewAnimationOptionTransitionCurUp animation:nil completion:nil];

转轮
[[NSBundle mainBundle] loadNibNamed:@".." owner:nil option:nil][0];
//如果是xib连线
(id)initWithCoder:(NSCoder *)aDecoder  //若还没连好线 =null
-(void)awakeFromNib   //连好线

//裁剪图片
CGImageCreateWithImageInRect(CGImageRef, CGRect);
                          //裁剪的图片    尺寸
[UIImage imageWithCGImage:..];
CGImage和像素相关
imageW = 40 * [UIScreen mainScreen].scale;//判断是什么屏
button.imageView.contentMode = UIViewContentModeCenter;

自定义button
//重写方法
-(CGRect)imageRectForContentRect:(CGRect)contentRect{
   
   return CGRectMake(....);
}

//无highlighted
-(void)setHighlighted:(BOOL)highlighted
{

}
//forControlEvent:UIControlEventTouchDown

//开始旋转
-(void)startRotating
{
   CADisplayLink *link = [CADisplayLink displayLinkWithTarget:self selector:@selector(update)];
   [link addToRunLoop:[NSRunLoop mainRunLoop] forMode:NSDefaultRunLoopMode];
}

-(void)update
{
   _rotationView.transform = CGAffineTransformRotate(_rotationView.transform, angle2radiom(45/60.0));
                                                                              //自定义宏
}
//如果有问题，把Auto layout去掉
_link.paused = YES;//暂停

dispatch_after(dispatch_time(DISPATCH_TIME_NOW,(int64_t)() *NCEC_PER_SEC)),dispatch_get_main_queue(),^{

});
取角
CGFloat angle = atan2(_selectedButton.transform.b,_selectedButton.transform.a);
