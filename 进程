进程
   进程是指在系统中正在运行的一个应用程序
   每一个进程之间是独立的，每个进程均运行在其专用且受保护的内存空间里

线程
   一个进程要想执行人物，必须得有线程
   线程是进程的基本执行单元，一个进程（程序）的所有任务都在线程中执行

线程的串行
   一个线程中的任务的执行是串行的
   同一时间，一个线程只能执行一个任务（按顺序执行这些任务）
   
多任务
  一个进程可以开启多条线程，每条线程可以并行（同时）执行不同的任务
  
多线程的原理
  同一时间，cpu只能处理一条线程，只有一条线程在工作
  多线程并发（同时）执行，其实是cpu快速地在多条线程之间调度
  若线程太多，cpu会在N多线程之间进行调度，cpu会累死，消耗大量资源，每条线程调度执行的频次会被降低（ios中一般5条以内）
  
多线程缺点
  开启多线程需要占用一定的内存空间（默认情况下，主线程占用1M，子线程占用512Kb），如果开启大量线程，会占用大量内存，降低性能
  程序设计更加复杂，如线程间通信，多线程的数据共享
  
子线程：（异步线程，后台线程）

什么是主线程
  一个ios程序运行后，默认会开启一条线程，称主线程或UI线程
  
主线程的主要作用
  显示／刷新UI界面
  处理UI事件（比如点击事件，滚动，拖拽事件）
  
主线程使用注意
  别将比较耗时的操作放在主线程
  耗时操作会卡住主线程序，严重影响UI流畅度
  
判断当前处在什么线程
  NSLog(@"%@",[NSThread currentThread]);
  
将耗时操作放在子线程，能同时处理按钮点击和耗时操作

ios中多线程的实现方案
  技术方案          简介                  语言      线程生命周期          使用频率
  pthread         通用多线程API            c          程序员管理           几乎不用
                  适用于Unix/linux/Win
                  跨平台/可移植
                  使用难度大
  
  NSThread        面向对象
                  简单易用，可直接操作线程对象
 
 
 GCD
 
 
 NSOperation
