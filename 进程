进程
   进程是指在系统中正在运行的一个应用程序
   每一个进程之间是独立的，每个进程均运行在其专用且受保护的内存空间里

线程
   一个进程要想执行人物，必须得有线程
   线程是进程的基本执行单元，一个进程（程序）的所有任务都在线程中执行

线程的串行
   一个线程中的任务的执行是串行的
   同一时间，一个线程只能执行一个任务（按顺序执行这些任务）
   
多任务
  一个进程可以开启多条线程，每条线程可以并行（同时）执行不同的任务
  
多线程的原理
  同一时间，cpu只能处理一条线程，只有一条线程在工作
  多线程并发（同时）执行，其实是cpu快速地在多条线程之间调度
  若线程太多，cpu会在N多线程之间进行调度，cpu会累死，消耗大量资源，每条线程调度执行的频次会被降低（ios中一般5条以内）
  
多线程缺点
  开启多线程需要占用一定的内存空间（默认情况下，主线程占用1M，子线程占用512Kb），如果开启大量线程，会占用大量内存，降低性能
  程序设计更加复杂，如线程间通信，多线程的数据共享
  
多线程的安全隐患
  多个线程可能访问同一块资源
  当多个线程访问同一资源时，容易引发数据错乱和数据安全问题
  安全隐患解决方法————————互斥锁
     1、  @synchronized（锁对象）{//需要锁定的代码}
       //锁定一份代码只用一把锁，用多把是无效的
           如
           @synchronized(self){//小括号里放的是锁对象(locker MSobject)
              //code
           }
     2、互斥锁缺点:消耗cpu大量资源 

线程同步：多条线程在同一条线上执行（按顺序执行任务）

子线程：（异步线程，后台线程）

什么是主线程
  一个ios程序运行后，默认会开启一条线程，称主线程或UI线程
  
主线程的主要作用
  显示／刷新UI界面
  处理UI事件（比如点击事件，滚动，拖拽事件）
  
主线程使用注意
  别将比较耗时的操作放在主线程
  耗时操作会卡住主线程序，严重影响UI流畅度
  
线程的状态
      start                    cpu调度当前线程
  新建——————>就绪（Runnable）—————————————————>运行（Running）——————————>死亡（Dead）（线程任务执行完毕/异常/强制退出）
                       ^    <——————————————————/
                        \     cpu调度其他线程 /
               sleep到时 \                   /调用sleep方法
                得到同步锁\                 /等待同步锁
                           \               <
                                阻塞(blocked)
   
  ————————————————————————————————————————
 ｜ ————————————————————————————  内存   ｜
 ｜｜可调用线程池              ｜        ｜
 ｜｜ ——————————  ——————————   ｜        ｜
 ｜｜｜线程对象｜｜其他线程｜  ｜        ｜
 ｜｜ ————｜————  ——————————   ｜        ｜
 ｜ ——————｜————————————————————         ｜
 ｜         ——>  阻塞时                  ｜
  ————————————————————————————————————————
  
判断当前处在什么线程
  NSLog(@"%@",[NSThread currentThread]);
  
将耗时操作放在子线程，能同时处理按钮点击和耗时操作

ios中多线程的实现方案
      技术方案          简介                             语言      线程生命周期          使用频率
      pthread         通用多线程API                       c          程序员管理           几乎不用
                      适用于Unix/linux/Win
                      跨平台/可移植
                      使用难度大
  
      NSThread        面向对象                            OC         程序员管理           偶尔使用
                      简单易用，可直接操作线程对象
 
 
      GCD              旨在替代NSTread                     c            自动管理            经常使用
                       充分利用设备的多核
 
 
      NSOperation      基于GCD（底层是GCD）                oc            自动管理           经常使用
                       比GCD多了一些功能
                       更加面向对对象
                       
pthread
   创建线程
   pthread_t  myRestrict;
   pthread_create(&myRestrict,NULL,函数指针,NULL);

NSThread
   一个NSThread对象就代表一条线程
   //创建，启动线程
   NSThread *thread = [[NSThread allo] initWithTarget:self selector:@selector(run) object:nil];
   [thread start];
   
   [NSThread mainThread];//主线程
   [thread isMainThread]
   [NSthread isMainThread];//当前线程是否为主线程
   thread.name = @"..";//线程名字

   创建线程后自动启动线程
   [NsThread detachNewThreadSelector:   toTarget:  WithObject: ];//无法详细配置
                                                            //^此处为传递的参数 
   
   隐式创建子线程并启动
   [self performSelectorInBackground:@selector()  withObject:  ];
   
   阻塞
   [NSThread sleepForTimeInterval:5];//睡眠5秒钟
   [NSThread sleepUntillDate:[NSDate dateWithTimeIntervalSinceNow:5]];
   
   强制退出——————中间加return
   [NSThread exit];
   一旦线程停止（死亡）了,就不能再开启，比如：start死亡后不能再start，要再创建一个
   
   
