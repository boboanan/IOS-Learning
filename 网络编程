网络编程
*基本概念
  客户端（client）                      <————————      <————————
  服务器（Server）                 客户端————————>服务器————————>数据库
  请求（Request）                  前端               后     端
  响应（Response）                 ios，andriod       java，php，.NET
  
  服务器
    软件开发阶段来分：
    远程服务器（外网服务器，正式服务器）  上线后使用
    本地服务器（内网服务器，测试服务器）  开发测试  由于时局域网，速度快

*Mac上启动Java服务器步骤：
  1、eclipse  （注意别有中文路径）
  2、java服务器程序
  3、配置服务器容器 Apache Tomcat
  Preference->content Types->text->java SourceFile->Default encoding:UTF-8/GB18030->update
  4、部署

*本地服务器的主机地址：
三种写法：
1、127.0.0.1   每台及其内置IP地址，指机器本身
2、localhost （localhost:8080/服务器名/）
3、交换机/路由器分配的地址：真机测试用此，真机和服务器在同一个局域网内

*加载plist
  NSString *file = [[NSBundle mainBundle] pathForResource:@"apps" ofType:@"plist"];
  NSArray *dictArray = [NSArray arrayWithContentOfFile:file];
  
*加载图片
   1、在tableView代理方法用
      URL：data   cell.imageView.image = [... imageWithData:..];
      弊端：1、在主线程下载，卡   2、会重复下载
   2、@property(nonatomic,strong)NSOperationQueue*queue;//懒加载
      NSBlockOperation *operation = [NSBlockOperation
      ...

*URL
  Uniform Resource Locator统一资源定位符
  通过一个url，能找到互联网上唯一一个资源
  基本格式 = 协议://主机地址/路径  （协议:不同的协议，代表着不同的资源查找方式，资源传输方式。主机地址：存放资源的主机IP地址，域名）
  
  常见协议：
  *HTTP     http://   超文本传输协议，访问的事远程的网络资源  
  *file     file://（不加主机地址）访问得失本地计算机上的资源
  *mailto   mailto:访问的时电子邮件地址
  *FTP      ftp://  访问得失共享主机的文件资源
  
  HTTP
  *规定客户端和服务器之间的数据传输格式
  *特点
       简单快速：HTTP协议简单，HTTP服务器的程序规模小，通信速度快
       灵活：HTTP允许传输任意类型数据，HTTP0.9和1.0使用非持续链接，限制每次连接只处理一个请求，服务器对客户端的请求响应后马上断开，节省传输时间
       
       *ios发送HTTP请求方案
           苹果原生：
              NSURLConnection:用法简单，古老
              NSURLSession:ios7新出技术，比NSURLConnection强大
              CFNetwork：NSURL的底层，纯c语言
              
           第三方框架：
              ASIHttpRequest：外号“HTTP终结者”，功能强大，已停止更新
              AFNetWorking：简单易用，提供基本常用功能，维护使用者多
              MKNetworkKit：简单易用，来自印度
              
          为提高开发效率，企业开发用的基本是第三方框架
          
          常用类：
            NSURL:请求地址
            NSURLRequest:一个请求（包含：1、一个url对象2、请求方法，请求头，请求体3、请求超时）
            NSMutableURLRequest:NSURLRequest子类
            NSURLConnection:负责发送请求，建立客户端和服务器的连接，发送NSURLRequest的数据给服务器，并收集来自服务器的响应数据
             
            NSURL *url = [NSURL URLWithString:@"..."];
            NSURLRequest *request = [NSURLRequest requestWithUrl:url];
            //发送一个同步请求（主线程发送请求）
            NSData *data = [NSURLConnection sendSynchrononsRequest:request returningResponse:nil  error:nil];
            
            
            
  cell下载图片思路——————————要沙盒缓存
  images:图片缓存                                                          operations：操作缓存
  
   根据图片的url      存在
   去images中取图片—————————— >将图片显示在cell上
    ｜不存在                        >
   检查沙盒中存不存  存在           ｜
   在 对应的图片   ——————————>加载沙盒中对应的图片
    ｜不存在                                                          将图片存入沙盒
   显示占位图片                                                        ｜
    ｜                                                              刷新表格
   根据图片的url     不存在                    下载完毕                 ｜
   查看operations中———————————>创建下载操作——————————————————>将操作从operations中移除
   存不存在下载操作            放到operations中               将图片当到images中
   ｜
   正在下载
   
   
   沙盒中：
   *Document——————（itunes会备份此文件夹）
   *Library ————————｛Caches,Perferences(itunes会备份)
   *tmp
   注：大的文件备份到Caches里，tmp不安全，系统会随机清除tmp里文件
   
   沙盒在  ～／资料库／ApplicationSupport/iphone Simlaton/8.0/Applications/修改时间排列
   (simpholders——————快速找沙盒插件)
   
   //沙盒中存图片
   if(image){
     appsVc.images[imageUrl] = image;
     //UIImageJPEGRepresentation(UIImage,1.0);
     //UIImage——>NSData——>File
     NSData *data = UIImagePNGRepresentation(image);
     //获得Caches路径
     NSString *caches = [NSSearchPathForDirectoriesInDomains(NSCachesDirectory,NSUserDomainMask,YES) lastObject];
     //YES代表展开~号，否则时~/.../..必须为全路径
     NSString *filename = [imageUrl lastPathcomponent];//文件的最后一个路径
     //拼接文件路径
     NSString *file = [caches stringByAppendingPathComponent:filename]//一定要有PathComponent因为会加路径“/”
     [data writeToFile:file atomically:YES];
   }
  //沙盒中取图片 
  if(image){
  }else{
    NSString *caches = [NSSearchPathForDirectoriesInDomains(NSCachesDirectory,NSUserDomainMask,YES) lastObject];
    NSString *filename = [appicon lastPathConponent];
    NSString *file = [caches stringByAppendingPathComponent:filename];
    NSData *data = [NSData dataWithContentsOfFile:file];
    if(data){
      cell/imageView.image = [UIImage imageWithData:data];
    }else{
      //显示占为图片，下载图片
    }
  }
  
  SDWebImage——————>网络图片处理框架
  功能：图片下载，图片缓存，下载进度，监听，GIF处理
  [cell,imageView sd_setImageWith:url placeholderImage:image];//沙盒中的缓存图片会被加密
  
  SDWebImageOptions  options = SDWebImageRetryFailed | SDWebImageLowPriority;
  [cell.imageView sd_setImageWithURL;url placeholderImage:placeholderImage option:options progress:^(){
    //此block会被调用多次
      //监听下载进度 (double)receivedSize/expectedSize
  } completed:^(){
  }];

//在AppDelegate.m中处理整个程序的内存紧张，不单单时某个控制器，使整个程序
#import"SDWebImageManager.h"
-(void)applicationDidReceiveMemoryWarning:(UIApplication *)application{
 //取消正在下载的操作
 [[SDWebImageManager shareManager] cancelAll]
 //清除内存缓存
 [[SDWebImageManager shareManager].imageCache clearMemory];//clearDisk是清除沙盒
 
 SDWebImage 缓存池过期时间默认时一个星期 (maxCacheAge)
 
 SDWebImageManager *mgr = [SDWebImageManager sharedManager];
 mgr.imageCache.maxCacheAge = 100*24*60*60
 //[SDImageCache sharedImageCache]等价于mgr.imageCache

}

*AFNetwork监控网络状态
  底层基于oc的NSURLConnection和NSURLSession
#import "AFNetworking.h"
-(void)viewDidLoad{
  [super viewDidLoad];
  AFNetworkReachabilityManager *mgr = [AFNetworkReachabilityManager sharedManager];
  [mgr setReachabilityStatusChangeBlock:^(AFNetworkReachabilityStatus *status){
    //当网络状态发生改变时调用次block
    switch(status){
      case AFNetworkReachabilityStatusReachableViaWifi:
        NSLog(@"WIFI");
        break;
      case AFNetworkReachabilityStatusReachableViaWAN:
        NSLog(@"自带网络");
        break；
      case AFNetworkReachabilityStatusNotReachable:
        NSLog(@"未知网络");
        break;
      default:
        break;
    }
  }];
  //开始监控
  [mgr startMonitoring];
}
-(void)dealloc{
  [[AFNetworkReachabilityManager sharedManager] stopMonitoring];
}


*ASI
  全称ASIHTTPRequest  HTTP终结者
  给予底层CFNetwork框架，运行效率高
  是非ARC
  NSURL *url = [NSURL URLWithString:@""];
  //创建一个请求
  ASIHTTPRequest *request= [ASIHTTPRequest requestWithURL:url];
  //超时设置
  request.timeOutSeconds = 15;
  //开始请求（同步，这行代码会卡住，等待服务器给数据）
  [request startSynchronous];
  //请求完毕
  NSError *error = [request error];
  if(error){
  }else{
  NSData *data = [request responseData];
  }
  
  *UIWebView
    UIWebView是ios内置的浏览器控件
    NSURL *url = [NSURL URLWithString:@""];
    NSURLRequest *request = [NSURLRequest requestWithUrl:url];
    [self.webView loadRequest];
    
    //加载本地 NSURL *url = [[NSBundle mainBundle] URLForResource:@"1" withExtension:@"pptx"];
    self.webView.scrollView.backgroundColor = [UIColor redColor];
    self.webView.scalesPageToFit = YES;
  
  
  
  
 
    
